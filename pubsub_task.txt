Опрос

1. Оцените уровень знаний по Java Collections Framework по шкале от 1 до 5, опишите какие коллекции использовали в практической работе;

2. Оцените уровень знаний по многопоточности Java по шкале от 1 до 5, опишите кратко решения, которые Вами применялись на практике с использованием технологий многопоточности;

3. Оцените уровень знаний по Spring Framework (Spring Boot Framework) по шкале от 1 до 5, опишите кратко какие проекты были Вами реализованы с использованием Spring;

4. Оцените уровень знаний по Hibernate Framework по шкале от 1 до 5, опишите кратко какие проекты были Вами реализованы с использованием Hibernate;

5. Работали ли вы с БД с помощью запросов SQL? Оцените уровень знаний языка SQL по шкале от 1 до 5, опишите кратко нестандартные задачи получения\модификации данных БД , которые были вами реализованы с помощью SQL;

6. Работали ли вы с операционными системами семейства Linux? Оцените уровень знаний основных команд Linux (поиск файлов, просмотр логов, проверка процессов, запуск сервисов, ssh и тд.) по шкале от 1 до 5, опишите кратко свой опыт по работе с системами семейства Linux?














Задание

Необходимо реализовать сервис сообщений Pub-Sub
Структура 
●	Описание
●	Протокол Сообщений
●	Модуль Publisher 
●	Модуль Subscriber 
●	Требования

Описание

Необходимо реализовать сервис, состоящий из 2 приложений. Первое приложение publisher отвечает за генерацию и отправку сообщений подписчику (subscriber). Subscriber разбирает сообщение и по определенной логике записывает его в базу данных.

Протокол
Publisher и subscriber общаются между собой методом отправки JSON сообщений по следующему протоколу:

•	ID. Идентификатор отправленного сообщения. Автоинкрементится в каждом сообщении
•	Msisdn. Уникальный номер абонента. В рамках этого задания рандомно сгенерированное цифровое значние.
•	Action. Тип сообщения. Сообщения могут быть 2 типов – PURCHASE или SUBSCRIPTION. Значение выбирается рандомно при генерации сообщения.
•	Timestamp. UNIX timestamp.

Пример сообщения:
{
    "id": 1,
    "msisdn": 123456789,
    "action": "PURCHASE",
    "timestamp": 1589464122
}




Publisher
●	Имеет модуль генерации описанных выше сообщений.
●	Имеет модуль отправки сгенерированных сообщений. Отправка сообщений осуществляется по протоколу HTTP по средствам POST запросов на Subscriber. Важно что бы Publisher осуществлял многопоточную отправку сообщений из 5 потоков. Пауза между отправками сообщений в каждом потоке должна быть 15 секунд

Subscriber 
●	Принимает отправленные запросы по HTTP протоколу.
●	Осуществляет парсинг сообщений.
●	Сохраняет полученные данные в БД
●	ACTION purchase должен сохраняться в таблицу PURCHASE, а ACTION  subscription в таблицу SUBSCRIPTION

Общие требования: 
●	Использование JAVA, Spring(модули на ваше усмотрение)
●	Все данные хранятся в БД (предпочтительно Postgres) 
●	Наличие текстового логгирования 
●	
●	После реализации необходимо предоставить: 
●	Исходный код (архив с проектом или ссылку в github) 
●	Внешние конфигурационные файлы (если используются) 
●	Схему БД (sql) 




Задание(Lite)


Необходимо реализовать сервис сообщений Pub-Sub
Структура 
●	Описание
●	Протокол Сообщений
●	Модуль Publisher 
●	Модуль Subscriber 
●	Требования

Описание

Необходимо реализовать сервис, состоящий из 2 приложений. Первое приложение publisher отвечает за генерацию и отправку сообщения подписчику (subscriber). Subscriber разбирает сообщение и по определенной логике записывает его в базу данных.

Протокол
Publisher и subscriber общаются между собой методом отправки JSON сообщений по следующему протоколу:

•	Msisdn. Уникальный номер абонента. В рамках этого задания рандомно сгенерированное цифровое значние.
•	Action. Тип сообщения. Сообщения могут быть 2 типов – PURCHASE или SUBSCRIPTION. Значение выбирается рандомно при генерации сообщения.
•	Timestamp. UNIX timestamp.

Пример сообщения:
{
    "msisdn": 123456789,
    "action": "PURCHASE",
    "timestamp": 1589464122
}




Publisher
●	Имеет модуль генерации описанных выше сообщений.
●	Имеет модуль отправки сгенерированных сообщений. Отправка сообщений осуществляется по протоколу HTTP по средствам POST запросов на Subscriber. 

Subscriber 
●	Принимает отправленные запросы по HTTP протоколу.
●	Осуществляет парсинг сообщений.
●	Сохраняет полученные данные в БД
●	ACTION purchase должен сохраняться в таблицу PURCHASE, а ACTION  subscription в таблицу SUBSCRIPTION

Общие требования: 
●	Использование JAVA, Spring(модули на ваше усмотрение)
●	Все данные хранятся в БД (предпочтительно Postgres) 
●	Наличие текстового логгирования 
●	
●	После реализации необходимо предоставить: 
●	Исходный код (архив с проектом или ссылку в github) 
●	Внешние конфигурационные файлы (если используются) 
●	Схему БД (sql) 

